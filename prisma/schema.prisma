// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Event {
  id  String  @default(cuid())  @id
  title String
  description String
  short_description String?
  imagePath String
  eventDate DateTime
  eventEndDate DateTime?
  totalSeats Int
  location String?
  tags String[] @default(["all"])
  private Boolean @default(false)
  time String?
  address1 String?
  address2 String?
  city String?
  state String?
  zipcode String?
  priceInCents String?
  cancelled Boolean @default(false)
  active Boolean @default(true)
  createdAt  DateTime   @default(now())
  author User @relation(fields: [authorId], references: [id])
  authorId String
  Users_going_to_event User[] @relation("UserScheduledEvents")
    tickets           Ticket[]
  payments          Payment[]
}

model DraftEvent {
  id                String    @id @default(cuid())
  title             String?
  description       String?
  short_description String?
  imagePath         String?
  eventDate         DateTime?
  eventEndDate DateTime?
  totalSeats        Int?
  location          String?
  tags              String[] @default(["all"])
  private           Boolean  @default(false)
  time              String?
  address1          String?
  address2          String?
  city              String?
  state             String?
  zipcode           String?
  priceInCents      String?
  createdAt         DateTime @default(now())

  author            User @relation(fields: [authorId], references: [id])
  authorId          String
}


model User {
  id String @id  @default(cuid())
  firstName String?
  lastName  String?
  password  String
  email     String  @unique
  bio String?
  profilePicUrl String?
  backroundPicUrl String?
  chapter String?
  university String?
  organization String?
  location String?
  greekId String?
  isVerified Boolean @default(false)
  isAdmin   Boolean @default(false)
  chapterAccount Boolean @default(false)
  stripeAccountId    String? 
  draftEvents DraftEvent[]
  events Event[]
  tickets            Ticket[]        @relation("UserTickets")
  payments           Payment[]
  User_Scheduled_Events Event[] @relation("UserScheduledEvents")
}

model Ticket {
  id               String   @id @default(cuid())
  user             User?     @relation("UserTickets", fields: [userId], references: [id])
  userId           String?
  name  String?
  email String?
  event            Event    @relation(fields: [eventId], references: [id])
  eventId          String
  checkoutSessionId String? @unique//Stripe ID to check duplicates
  paymentIntentId  String?  // Stripe ID
  status           String   // "paid", "refunded", "failed"
  createdAt        DateTime @default(now())
  refundId        String?  // Stripe Refund ID
}

model Payment {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  event            Event    @relation(fields: [eventId], references: [id])
  eventId          String
  amount           Int      // in cents
  applicationFee   Int?     // your platform fee
  paymentIntentId  String
  status           String   // "succeeded", "refunded", "disputed"
  createdAt        DateTime @default(now())
}